function [fitresult, gof] = LorentzFit(x, y, varargin)
%LORENTZFIT Lorentzian fit to EPR Data
%
% 	Fits a first derivative Lorentzian to noisy EPR data. This function uses
% 	a non-linear least squares fit with a trust-region algorithm and least
% 	absolute residuals (LAR) robustness. That is, the absolute difference
% 	between curve fit and experimental values is used for optimization.
% 	This supresses distortions from outliers generated by noise.
%
% 	Dependancies:
% 	LorentzDeriv.m
%

%   $Author: Sam Schott, University of Cambridge <ss2151@cam.ac.uk>$
%   $Date: 2018/07/05 12:58 $    $Revision: 0.1 $

SP = ParsVarargin(varargin);
[~,Nmin]=min(y);[Max,Nmax]=max(y);
try
    Gamma = SP.Gamma;
catch
    Gamma = x(Nmin)-x(Nmax);
end
try
    B0 = SP.B0;
catch
    B0=x(Nmax) + Gamma/2;
end

[xData, yData] = prepareCurveData( x, y );

% Set up fittype and options.
ft = fittype( 'LorentzDeriv(x,a,w,x0)' );
opts = fitoptions( 'Method', 'NonlinearLeastSquares');
opts.Display = 'Off';
opts.Robust = 'LAR';
opts.Algorithm = 'trust-region';
opts.StartPoint = [2*Max Gamma B0];

% Fit model to data.
[fitresult, gof] = fit( xData, yData, ft, opts );

% Create a figure for the plots.
figure( 'Name', 'Lorentz Fit' );
yfit=feval(fitresult,x);

% Plot fit with data.
subplot( 2, 1, 1 );
h = plot(x,y,'.',x,yfit,'-');
legend( h, 'Experimental (normalised)', 'Lorentz Fit', 'Location', 'SouthWest' );
% Label axes
xlabel 'B (G)'
ylabel 'ESR Intesity'

% Plot residuals.
subplot( 2, 1, 2 );
h = plot(x,y-yfit,'.',x,zeros(1,length(x)),'-');
legend( h, 'residuals', 'Zero Line', 'Location', 'NorthEast' );
% Label axes
xlabel 'B (G)'
ylabel 'Residuals'

display(fitresult);

end

